// swiftlint:disable all
{% if tables.count > 0 %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}

{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
    {% for type in types %}
        _ p{{forloop.counter}}: {{type}}{{ ", " if not forloop.last }}
    {% endfor %}
{% endfilter %}{% endmacro %}
{% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
    {% for type in types %}
        {% if type == "UnsafeRawPointer" %}
        Int(bitPattern: p{{forloop.counter}})
        {% else %}
        p{{forloop.counter}}
        {% endif %}
        {{ ", " if not forloop.last }}
    {% endfor %}
{% endfilter %}{% endmacro %}
{% macro recursiveBlock table item %}
    {% for string in item.strings %}
    {% if not param.noComments %}

    /// Method which wraps the string with base language translation: **{{string.translation}}**
    /// - Parameters:
    ///     - localization: Used for string localization. Default value is [.current](x-source-tag://current-bundle-locale).
    ///     - comment: An additional comment needed for dispelling the string's meaning ambiguity. Default value is empty
    /// - Returns: Localized string
    {% endif %}
    {% if string.types %}
    {{accessModifier}} static func {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}(localization: Bundle.Locale = .current, comment: String = "", {% call parametersBlock string.types %}) -> String {
        "{{string.key}}".localized(for: localization, comment: comment, arguments: {% call argumentsBlock string.types %})
    }
    {% else %}
    {{accessModifier}} static func {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}(localization: Bundle.Locale = .current, comment: String = "") -> String {
        "{{string.key}}".localized(for: localization, comment: comment)
    }
    {% endif %}
    {% endfor %}
    {% for child in item.children %}

    {{accessModifier}} enum {{child.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
        {% filter indent:4 %}{% call recursiveBlock table child %}{% endfilter %}
    }
    {% endfor %}

{% endmacro %}
{% set enumName %}{{param.enumName|default:"L10n"}}{% endset %}
{{accessModifier}} enum {{enumName}} {
    {% if tables.count > 1 %}
    {% for table in tables %}
    {{accessModifier}} enum {{table.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
        {% filter indent:4 %}{% call recursiveBlock table.name table.levels %}{% endfilter %}
    }
    {% endfor %}
    {% else %}
    {% call recursiveBlock tables.first.name tables.first.levels %}
    {% endif %}
}
{% else %}
// No l10n strings found
{% endif %}
