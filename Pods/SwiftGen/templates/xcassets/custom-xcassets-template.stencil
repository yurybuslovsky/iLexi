// swiftlint:disable all
{% if catalogs %}
{% set enumName %}{{param.enumName|default:"Asset"}}{% endset %}
{% set colorType %}{{param.colorTypeName|default:"ColorAsset"}}{% endset %}
{% set dataType %}{{param.dataTypeName|default:"DataAsset"}}{% endset %}
{% set imageType %}{{param.imageTypeName|default:"ImageAsset"}}{% endset %}
{% set colorAlias %}{{param.colorAliasName|default:"AssetColorTypeAlias"}}{% endset %}
{% set imageAlias %}{{param.imageAliasName|default:"AssetImageTypeAlias"}}{% endset %}
{% set forceNamespaces %}{{param.forceProvidesNamespaces|default:"false"}}{% endset %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
#if os(OSX)

import AppKit.NSImage

/// **UIColor**/**NSColor** type alias which contributes cross-platform code generation compatibility
{{accessModifier}} typealias {{colorAlias}} = NSColor

/// **UIImage**/**NSImage** type alias which contributes cross-platform code generation compatibility
{{accessModifier}} typealias {{imageAlias}} = NSImage

#elseif os(iOS) || os(tvOS) || os(watchOS)

import UIKit.UIImage

/// **UIColor**/**NSColor** type alias which contributes cross-platform code generation compatibility
{{accessModifier}} typealias {{colorAlias}} = UIColor

/// **UIImage**/**NSImage** type alias which contributes cross-platform code generation compatibility
{{accessModifier}} typealias {{imageAlias}} = UIImage

#endif

// MARK: - Assets

{% macro enumBlock assets %}
  {% call casesBlock assets %}
  {% if param.allValues %}

  {{accessModifier}} static let allColors: [{{colorType}}] = [
    {% filter indent:2 %}{% call allValuesBlock assets "color" "" %}{% endfilter %}
  ]

  {{accessModifier}} static let allDataAssets: [{{dataType}}] = [
    {% filter indent:2 %}{% call allValuesBlock assets "data" "" %}{% endfilter %}
  ]

  {{accessModifier}} static let allImages: [{{imageType}}] = [
    {% filter indent:2 %}{% call allValuesBlock assets "image" "" %}{% endfilter %}
  ]
  {% endif %}
{% endmacro %}
{% macro casesBlock assets %}
    {% for asset in assets %}
    {% if asset.type == "color" %}
    {{accessModifier}} static var {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}: {{colorAlias}} { {{colorType}}(name: "{{asset.value}}").color }
    {% elif asset.type == "data" %}
    {{accessModifier}} static var {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}: NSDataAsset { {{dataType}}(name: "{{asset.value}}").data }
    {% elif asset.type == "image" %}
    {{accessModifier}} static var {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}: {{imageAlias}} { {{imageType}}(name: "{{asset.value}}").image }
    {% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}

    {{accessModifier}} enum {{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
        {% filter indent:4 %}{% call casesBlock asset.items %}{% endfilter %}
    }
    {% elif asset.items %}
    {% call casesBlock asset.items %}
    {% endif %}
    {% endfor %}
{% endmacro %}
{% macro allValuesBlock assets filter prefix %}
    {% for asset in assets %}
    {% if asset.type == filter %}
    {{prefix}}{{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}},
    {% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
    {% set prefix2 %}{{prefix}}{{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.{% endset %}
    {% call allValuesBlock asset.items filter prefix2 %}
    {% elif asset.items %}
    {% call allValuesBlock asset.items filter prefix %}
    {% endif %}
    {% endfor %}
{% endmacro %}
{{accessModifier}} enum {{enumName}} {
    {% if catalogs.count > 1 %}
    {% for catalog in catalogs %}

    {{accessModifier}} enum {{catalog.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
        {% filter indent:4 %}{% call enumBlock catalog.assets %}{% endfilter %}
    }
    {% endfor %}
    {% else %}
    {% call enumBlock catalogs.first.assets %}
    {% endif %}

}

// MARK: - Auxiliary

private struct {{colorType}} {

    fileprivate private(set) var name: String

    @available(iOS 11.0, tvOS 11.0, watchOS 4.0, OSX 10.13, *)
    fileprivate var color: {{colorAlias}} { {{colorAlias}}(asset: self) }

}

private struct {{imageType}} {

    fileprivate private(set) var name: String

    fileprivate var image: {{imageAlias}} {
        let bundle = Bundle(for: CoreDummy.self)
        #if os(iOS) || os(tvOS)
        let image = {{imageAlias}}(named: name, in: bundle, compatibleWith: nil)
        #elseif os(OSX)
        let image = bundle.image(forResource: NSImage.Name(name))
        #elseif os(watchOS)
        let image = {{imageAlias}}(named: name)
        #endif
        guard let result = image else { fatalError("Unable to load image named \(name).") }
        return result
    }

}

private struct {{dataType}} {

    fileprivate private(set) var name: String

    #if os(iOS) || os(tvOS) || os(OSX)
    @available(iOS 9.0, tvOS 9.0, OSX 10.11, *)
    fileprivate var data: NSDataAsset { NSDataAsset(asset: self) }
    #endif

}

private extension {{colorAlias}} {

    @available(iOS 11.0, tvOS 11.0, watchOS 4.0, OSX 10.13, *)
    convenience init!(asset: {{colorType}}) {
        let bundle = Bundle(for: CoreDummy.self)
        #if os(iOS) || os(tvOS)
        self.init(named: asset.name, in: bundle, compatibleWith: nil)
        #elseif os(OSX)
        self.init(named: NSColor.Name(asset.name), bundle: bundle)
        #elseif os(watchOS)
        self.init(named: asset.name)
        #endif
    }

}

private extension {{imageAlias}} {

    @available(iOS 1.0, tvOS 1.0, watchOS 1.0, *)
    @available(
        OSX,
        deprecated,
        message: "This initializer is unsafe on macOS, please use the {{imageType}}.image property"
    )
    convenience init!(asset: {{imageType}}) {
        #if os(iOS) || os(tvOS)
        let bundle = Bundle(for: CoreDummy.self)
        self.init(named: asset.name, in: bundle, compatibleWith: nil)
        #elseif os(OSX)
        self.init(named: NSImage.Name(asset.name))
        #elseif os(watchOS)
        self.init(named: asset.name)
        #endif
    }

}

#if os(iOS) || os(tvOS) || os(OSX)
@available(iOS 9.0, tvOS 9.0, OSX 10.11, *)
private extension NSDataAsset {

    convenience init!(asset: {{dataType}}) {
        let bundle = Bundle(for: CoreDummy.self)
        #if os(iOS) || os(tvOS)
        self.init(name: asset.name, bundle: bundle)
        #elseif os(OSX)
        self.init(name: NSDataAsset.Name(asset.name), bundle: bundle)
        #endif
    }

}
#endif
{% else %}
// No assets found
{% endif %}
